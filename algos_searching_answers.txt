Bloc - Computer Science Fundamentals 
Algorithms: Searching 

EXERCISES 

1. What is a real-life scenario that uses linear search?

A: An example of a real-life scenario using linear search could be a class on a field trip where the students are lined up in no particular order, and you need to find a specific student to deliver a message from their parents. This approach works in this case because classes are typically relatively small in size and the students are not lined up in alphabetical order.   

2. What is a real-life scenario that uses binary search?

A: If looking up a specific name in a phone book, one could open to the middle of the phone book and quickly determine if the name being searched for is in the lower half or the upper half of the phone book. This process could be repeated until you find the name, since the phone book is organized alphabetically.  

3. Given the alphabetically sorted collection in this 
checkpoint, how many iterations would it take to find the value G using linear search?

A: Seven iterations 

4. Given the alphabetically sorted collection in this checkpoint, how many iterations would it take to find the value G using binary search?

A: Three iterations

5. Given an unsorted collection of a million items, which algorithm would you choose between linear search and binary search? Explain your reasoning.

A: For an unsorted collection I would choose linear search because in order to use binary search you would first have to sort the entire collection since binary search only works on sorted collections. The sorting itself would take O(nlogn) where as linear is O(n), so linear is the best choice in this situation. 

6. Given a sorted collection of a million items, which algorithm would you choose between linear search and binary search? Explain your reasoning.

A: Binary search makes more sense in this situation since the collection is sorted. This allows binary search to handle to the collection much more efficiently than linear search which has to examine every element, whereas binary search halves the collection with every iteration, drastically decreasing the time it takes to find the value being searched for. 

PROGRAMMING QUESTIONS

1. You and a friend have set a wager to see who can find the word "Albatross" in the dictionary the fastest. Write a program to allow you to win the bet.

function findWord(collection, word) {
  let low = collection[0];
  let high = collection[collection.length - 1];

  while (low <= high) {
    let mid = (low + high) / 2;

    if (collection[mid] > word) {
      let high = mid - 1;
    } else if (collection[mid] < word) {
      let low = mid + 1;
    } else {
      return mid;
    }
  }
  return "not found";
}

console.log(findWord('albatross'));

2. 

function findFish(collection, target) {
  let result = null, value;

  for (let i = 0; i < collection.length; i++) {
    value = collection[i];

    if (value === target) {
      result = i;
    }
  }
  return result;
}

console.log(findFish(collection, whiteSpottedGoldfish));




